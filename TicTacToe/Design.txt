In order to satisfy the project requirements, Changes had to be made to both the User and Game models. The Score entity was removed entirely since my game is a 2 player game. 

In order to satisfy the requirements of the project, I added gameKeysPlaying, wins, losses, and draws to the user object. Adding gameKeysPlaying was tricky and the only way I could figure out how to do it was to reference the Conference Central code from the fourth project's class. The other tricky portion was figuring out how to represent all of a user's games efficiently. I referenced Conference Central to learn how to return a form that contained a list of other forms. This same principal came in handy when displaying all users' wins, losses, and draws. These attributes were added to the User object to satisfy the get_user_rankings endpoint requirement.

A number of changes had to be made to the Game object. A board had to be added to reflect the 3x3 grid that Tic-Tac-Toe is played on. A board is nothing more than a length 8 list. player1_name and player2_name had to be added since a game consists of two players. An attribute called isPlayer1_turn was added to keep track of who's turn it is in a game. If isPlayer1_turn is true then it is player 1's turn. If isPlayer1_turn is false, then it is player 2's turn. Another attribute added was, isPlayer1_X. If isPlayer1_X is true then player 1 is X and player 2 is O. If isPlayer1_X is false then player 2 is X and player 2 is O. Passkey was added as an attribute to work with the join_game endpoint. Passkey is generated when a new game is created and can be shared with another user to invite them to a game if you don't set them as the second player at the time of game creation. This is used in the join_game endpoint. Winner was added to track who the winner of a game is. Canceled was added as a boolean attribute to keep track of whether or not a game was ended due to cancellation. This was also added to help satisfy the requirements of the cancel_game endpoint. History was added as a list to keep track of all the moves made over the course of a game. This was done to help satisfy the requirements of designing the get_game_history endpoint.  

The hardest part about this project was adding new functionality via app engine. Not only was it an effort to implement Tic-Tac-Toe and figure out how to enforce legal moves, it was also tough to figure out how to do all these things through google app-engine. I wanted to implement logic to check for user victory conditions in such a way that did not make use of a long list of conditional statements. I also was very pleased with how I checked for draw games. This was done through the all() function that checks all members of an iterable against the same condition. Thus, if all game spaces on a board is not 0, then that means the board is full and the game is a draw. Fortunately, through a long series of tests and frequent browsing of the google app engine logs, I was eventually able to add all of the required functionality to the project. Having the Conference Central code and Guess A Number code available for reference also made this project much more manageable. I am looking forward to all of the feedback that this project will receive. I am still relatively new to coding and know that I still have a lot to learn.